#include "application/foc/instantiations/TrigonometricImpl.hpp"
#include "numerical/math/CompilerOptimizations.hpp"
#include <cmath>

namespace foc
{
    namespace
    {
        constexpr size_t LUT_SIZE = 512;
        constexpr size_t LUT_MASK = LUT_SIZE - 1;
        constexpr float PI = 3.14159265358979323846f;
        constexpr float TWO_PI = 6.28318530717958647692f;
        constexpr float LUT_SCALE = static_cast<float>(LUT_SIZE) / TWO_PI;

        alignas(16) const float sineLUT[LUT_SIZE] = {
            0.0000000f, 0.0122715f, 0.0245412f, 0.0368072f, 0.0490677f, 0.0613207f, 0.0735646f, 0.0857973f,
            0.0980171f, 0.1102222f, 0.1224107f, 0.1345807f, 0.1467305f, 0.1588581f, 0.1709619f, 0.1830399f,
            0.1950903f, 0.2071114f, 0.2191012f, 0.2310581f, 0.2429802f, 0.2548656f, 0.2667128f, 0.2785197f,
            0.2902847f, 0.3020059f, 0.3136817f, 0.3253103f, 0.3368899f, 0.3484187f, 0.3598950f, 0.3713172f,
            0.3826834f, 0.3939920f, 0.4052413f, 0.4164296f, 0.4275551f, 0.4386163f, 0.4496113f, 0.4605387f,
            0.4713967f, 0.4821838f, 0.4928982f, 0.5035384f, 0.5141027f, 0.5245897f, 0.5349976f, 0.5453249f,
            0.5555702f, 0.5657318f, 0.5758082f, 0.5857979f, 0.5956993f, 0.6055110f, 0.6152316f, 0.6248595f,
            0.6343933f, 0.6438316f, 0.6531728f, 0.6624157f, 0.6715590f, 0.6806013f, 0.6895405f, 0.6983750f,
            0.7071068f, 0.7157308f, 0.7242471f, 0.7326542f, 0.7409511f, 0.7491364f, 0.7572088f, 0.7651673f,
            0.7730105f, 0.7807372f, 0.7883464f, 0.7958369f, 0.8032075f, 0.8104572f, 0.8175848f, 0.8245893f,
            0.8314696f, 0.8382247f, 0.8448536f, 0.8513552f, 0.8577286f, 0.8639729f, 0.8700870f, 0.8760701f,
            0.8819213f, 0.8876396f, 0.8932243f, 0.8986745f, 0.9039893f, 0.9091680f, 0.9142098f, 0.9191139f,
            0.9238795f, 0.9285060f, 0.9329928f, 0.9373390f, 0.9415441f, 0.9456073f, 0.9495282f, 0.9533061f,
            0.9569403f, 0.9604305f, 0.9637761f, 0.9669765f, 0.9700313f, 0.9729400f, 0.9757021f, 0.9783174f,
            0.9807853f, 0.9831055f, 0.9852776f, 0.9873014f, 0.9891765f, 0.9909026f, 0.9924795f, 0.9939070f,
            0.9951847f, 0.9963126f, 0.9972905f, 0.9981181f, 0.9987955f, 0.9993224f, 0.9996988f, 0.9999247f,
            1.0000000f, 0.9999247f, 0.9996988f, 0.9993224f, 0.9987955f, 0.9981181f, 0.9972905f, 0.9963126f,
            0.9951847f, 0.9939070f, 0.9924795f, 0.9909026f, 0.9891765f, 0.9873014f, 0.9852776f, 0.9831055f,
            0.9807853f, 0.9783174f, 0.9757021f, 0.9729400f, 0.9700313f, 0.9669765f, 0.9637761f, 0.9604305f,
            0.9569403f, 0.9533061f, 0.9495282f, 0.9456073f, 0.9415441f, 0.9373390f, 0.9329928f, 0.9285060f,
            0.9238795f, 0.9191139f, 0.9142098f, 0.9091680f, 0.9039893f, 0.8986745f, 0.8932243f, 0.8876396f,
            0.8819213f, 0.8760701f, 0.8700870f, 0.8639729f, 0.8577286f, 0.8513552f, 0.8448536f, 0.8382247f,
            0.8314696f, 0.8245893f, 0.8175848f, 0.8104572f, 0.8032075f, 0.7958369f, 0.7883464f, 0.7807372f,
            0.7730105f, 0.7651673f, 0.7572088f, 0.7491364f, 0.7409511f, 0.7326542f, 0.7242471f, 0.7157308f,
            0.7071068f, 0.6983750f, 0.6895405f, 0.6806013f, 0.6715590f, 0.6624157f, 0.6531728f, 0.6438316f,
            0.6343933f, 0.6248595f, 0.6152316f, 0.6055110f, 0.5956993f, 0.5857979f, 0.5758082f, 0.5657318f,
            0.5555702f, 0.5453249f, 0.5349976f, 0.5245897f, 0.5141027f, 0.5035384f, 0.4928982f, 0.4821838f,
            0.4713967f, 0.4605387f, 0.4496113f, 0.4386163f, 0.4275551f, 0.4164296f, 0.4052413f, 0.3939920f,
            0.3826834f, 0.3713172f, 0.3598950f, 0.3484187f, 0.3368899f, 0.3253103f, 0.3136817f, 0.3020059f,
            0.2902847f, 0.2785197f, 0.2667128f, 0.2548656f, 0.2429802f, 0.2310581f, 0.2191012f, 0.2071114f,
            0.1950903f, 0.1830399f, 0.1709619f, 0.1588581f, 0.1467305f, 0.1345807f, 0.1224107f, 0.1102222f,
            0.0980171f, 0.0857973f, 0.0735646f, 0.0613207f, 0.0490677f, 0.0368072f, 0.0245412f, 0.0122715f,
            0.0000000f, -0.0122715f, -0.0245412f, -0.0368072f, -0.0490677f, -0.0613207f, -0.0735646f, -0.0857973f,
            -0.0980171f, -0.1102222f, -0.1224107f, -0.1345807f, -0.1467305f, -0.1588581f, -0.1709619f, -0.1830399f,
            -0.1950903f, -0.2071114f, -0.2191012f, -0.2310581f, -0.2429802f, -0.2548656f, -0.2667128f, -0.2785197f,
            -0.2902847f, -0.3020059f, -0.3136817f, -0.3253103f, -0.3368899f, -0.3484187f, -0.3598950f, -0.3713172f,
            -0.3826834f, -0.3939920f, -0.4052413f, -0.4164296f, -0.4275551f, -0.4386163f, -0.4496113f, -0.4605387f,
            -0.4713967f, -0.4821838f, -0.4928982f, -0.5035384f, -0.5141027f, -0.5245897f, -0.5349976f, -0.5453249f,
            -0.5555702f, -0.5657318f, -0.5758082f, -0.5857979f, -0.5956993f, -0.6055110f, -0.6152316f, -0.6248595f,
            -0.6343933f, -0.6438316f, -0.6531728f, -0.6624157f, -0.6715590f, -0.6806013f, -0.6895405f, -0.6983750f,
            -0.7071068f, -0.7157308f, -0.7242471f, -0.7326542f, -0.7409511f, -0.7491364f, -0.7572088f, -0.7651673f,
            -0.7730105f, -0.7807372f, -0.7883464f, -0.7958369f, -0.8032075f, -0.8104572f, -0.8175848f, -0.8245893f,
            -0.8314696f, -0.8382247f, -0.8448536f, -0.8513552f, -0.8577286f, -0.8639729f, -0.8700870f, -0.8760701f,
            -0.8819213f, -0.8876396f, -0.8932243f, -0.8986745f, -0.9039893f, -0.9091680f, -0.9142098f, -0.9191139f,
            -0.9238795f, -0.9285060f, -0.9329928f, -0.9373390f, -0.9415441f, -0.9456073f, -0.9495282f, -0.9533061f,
            -0.9569403f, -0.9604305f, -0.9637761f, -0.9669765f, -0.9700313f, -0.9729400f, -0.9757021f, -0.9783174f,
            -0.9807853f, -0.9831055f, -0.9852776f, -0.9873014f, -0.9891765f, -0.9909026f, -0.9924795f, -0.9939070f,
            -0.9951847f, -0.9963126f, -0.9972905f, -0.9981181f, -0.9987955f, -0.9993224f, -0.9996988f, -0.9999247f,
            -1.0000000f, -0.9999247f, -0.9996988f, -0.9993224f, -0.9987955f, -0.9981181f, -0.9972905f, -0.9963126f,
            -0.9951847f, -0.9939070f, -0.9924795f, -0.9909026f, -0.9891765f, -0.9873014f, -0.9852776f, -0.9831055f,
            -0.9807853f, -0.9783174f, -0.9757021f, -0.9729400f, -0.9700313f, -0.9669765f, -0.9637761f, -0.9604305f,
            -0.9569403f, -0.9533061f, -0.9495282f, -0.9456073f, -0.9415441f, -0.9373390f, -0.9329928f, -0.9285060f,
            -0.9238795f, -0.9191139f, -0.9142098f, -0.9091680f, -0.9039893f, -0.8986745f, -0.8932243f, -0.8876396f,
            -0.8819213f, -0.8760701f, -0.8700870f, -0.8639729f, -0.8577286f, -0.8513552f, -0.8448536f, -0.8382247f,
            -0.8314696f, -0.8245893f, -0.8175848f, -0.8104572f, -0.8032075f, -0.7958369f, -0.7883464f, -0.7807372f,
            -0.7730105f, -0.7651673f, -0.7572088f, -0.7491364f, -0.7409511f, -0.7326542f, -0.7242471f, -0.7157308f,
            -0.7071068f, -0.6983750f, -0.6895405f, -0.6806013f, -0.6715590f, -0.6624157f, -0.6531728f, -0.6438316f,
            -0.6343933f, -0.6248595f, -0.6152316f, -0.6055110f, -0.5956993f, -0.5857979f, -0.5758082f, -0.5657318f,
            -0.5555702f, -0.5453249f, -0.5349976f, -0.5245897f, -0.5141027f, -0.5035384f, -0.4928982f, -0.4821838f,
            -0.4713967f, -0.4605387f, -0.4496113f, -0.4386163f, -0.4275551f, -0.4164296f, -0.4052413f, -0.3939920f,
            -0.3826834f, -0.3713172f, -0.3598950f, -0.3484187f, -0.3368899f, -0.3253103f, -0.3136817f, -0.3020059f,
            -0.2902847f, -0.2785197f, -0.2667128f, -0.2548656f, -0.2429802f, -0.2310581f, -0.2191012f, -0.2071114f,
            -0.1950903f, -0.1830399f, -0.1709619f, -0.1588581f, -0.1467305f, -0.1345807f, -0.1224107f, -0.1102222f,
            -0.0980171f, -0.0857973f, -0.0735646f, -0.0613207f, -0.0490677f, -0.0368072f, -0.0245412f, -0.0122715f
        };
    }

    OPTIMIZE_FOR_SPEED
    float TrigonometricFunctions::Sine(const float& angle) const
    {
        auto scaledAngle = angle * LUT_SCALE;
        auto rawIndex = static_cast<int>(scaledAngle);

        auto index = rawIndex & (LUT_SIZE - 1);
        if (rawIndex < 0)
            index = (LUT_SIZE + (rawIndex % LUT_SIZE)) & (LUT_SIZE - 1);

        auto fraction = scaledAngle - static_cast<float>(rawIndex);

        auto nextIndex = (index + 1) & LUT_MASK;

        auto y0 = sineLUT[index];
        auto y1 = sineLUT[nextIndex];

        return y0 + fraction * (y1 - y0);
    }

    OPTIMIZE_FOR_SPEED
    float TrigonometricFunctions::Cosine(const float& angle) const
    {
        constexpr float PI_OVER_2 = PI * 0.5f;
        return Sine(angle + PI_OVER_2);
    }

    OPTIMIZE_FOR_SPEED
    float TrigonometricFunctions::Arctangent(const float& value) const
    {
        return std::atan(value);
    }

    OPTIMIZE_FOR_SPEED
    float TrigonometricFunctions::Phase(const float& real, const float& imag) const
    {
        return std::atan2(imag, real);
    }
}
